name: log-engine
services:
  kafka:
    image: bitnami/kafka:3.7.0-debian-12-r6
    container_name: kafka
    restart: unless-stopped
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_HEAP_OPTS=-Xms512m -Xmx512m
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [lognet]
    ports:
      - "9092:9092"

  opensearch:
    image: opensearchproject/opensearch:2.13.0
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=false
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=A7v!k9Q^zP3m
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      # Security plugin ON -> HTTPS on 9200 with self-signed certs
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    volumes:
      - os-data:/usr/share/opensearch/data
    networks: [lognet]
    ports:
      - "9200:9200"
    healthcheck:
      # Use HTTPS (-k to skip cert verify) and basic auth
      test: ["CMD-SHELL", "curl -sk -u admin:A7v!k9Q^zP3m https://localhost:9200/_cluster/health | grep -E '\"status\"'"]
      interval: 10s
      timeout: 5s
      retries: 30

  dashboards:
    image: opensearchproject/opensearch-dashboards:2.13.0
    container_name: dashboards
    environment:
      - OPENSEARCH_HOSTS=["https://opensearch:9200"]
      - OPENSEARCH_USERNAME=admin
      - OPENSEARCH_PASSWORD=A7v!k9Q^zP3m
      - OPENSEARCH_SSL_VERIFICATIONMODE=none
      - SERVER_HOST=0.0.0.0
    depends_on:
      opensearch:
        condition: service_healthy
    networks: [lognet]
    ports:
      - "5601:5601"
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:5601/api/status | grep -E 'All services are available|Green' || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 30

  api:
    build: { context: ./services/api, dockerfile: Dockerfile }
    container_name: api
    env_file: [.env]
    depends_on:
      kafka:      { condition: service_healthy }
      opensearch: { condition: service_healthy }
    networks: [lognet]
    ports:
      - "8080:8080"
    command: [ "bash", "-lc", "uvicorn app.main:app --host 0.0.0.0 --port 8080" ]
    healthcheck:
      test: ["CMD-SHELL", "echo ok"]
      interval: 30s
      timeout: 5s
      retries: 3

  ingestor:
    build: { context: ./services/ingestor, dockerfile: Dockerfile }
    container_name: ingestor
    env_file: [.env]
    depends_on:
      kafka: { condition: service_healthy }
    networks: [lognet]
    command: [ "bash", "-lc", "uvicorn app.main:app --host 0.0.0.0 --port 8080" ]
    healthcheck:
      test: ["CMD-SHELL", "echo ok"]
      interval: 30s
      timeout: 5s
      retries: 3

  indexer:
    build: { context: ./services/indexer, dockerfile: Dockerfile }
    container_name: indexer
    env_file: [.env]
    depends_on:
      kafka:      { condition: service_healthy }
      opensearch: { condition: service_healthy }
    networks: [lognet]
    command: [ "bash", "-lc", "uvicorn app.main:app --host 0.0.0.0 --port 8080" ]
    healthcheck:
      test: ["CMD-SHELL", "echo ok"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  lognet:

volumes:
  os-data:
